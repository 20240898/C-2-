size_t fwrite(const void *buffer, size_t size, size_t count, FILE *stream);
/*
역할: 메모리의 데이터를 파일에 씁니다.
buffer: 쓸 데이터가 저장된 메모리 공간
size: 각 항목의 크기(바이트)
count: 쓸 항목의 수
stream: 파일 포인터
반환값: 성공적으로 쓴 항목의 수
*/
long ftell(FILE *stream);
/*
역할: 현재 파일 위치 지시자의 위치를 반환합니다.
stream: 파일 포인터
반환값: 파일 위치 지시자의 현재 위치 (바이트 단위)
*/
int feof(FILE *stream);
/*
역할: 파일의 끝에 도달했는지 확인합니다.
stream: 파일 포인터
반환값: 파일의 끝이면 0이 아닌 값, 아니면 0
*/
int fseek(FILE *stream, long offset, int origin);
/*
역할: 파일 위치 지시자를 이동시킵니다.
stream: 파일 포인터
offset: 이동할 바이트 수
origin: 시작 위치 (SEEK_SET: 파일 시작, SEEK_CUR: 현재 위치, SEEK_END: 파일 끝)
반환값: 성공 시 0, 실패 시 0이 아닌 값
*/
int fsetpos(FILE *stream, const fpos_t *pos);
/*
역할: 파일 위치 지시자를 지정된 위치로 이동시킵니다.
stream: 파일 포인터
pos: 새로운 파일 위치를 나타내는 포인터
반환값: 성공 시 0, 실패 시 0이 아닌 값
*/
void rewind(FILE *stream);
/*
역할: 파일 위치 지시자를 파일의 시작으로 되돌립니다.
stream: 파일 포인터
반환값: 없음
*/
char *fgets(char *str, int num, FILE *stream);
/*
역할: 파일이나 표준 입력에서 문자열을 읽어옵니다.
str: 읽은 문자열을 저장할 버퍼
num: 읽을 최대 문자 수 (NULL 문자 포함)
stream: 파일 포인터 또는 stdin
반환값: 성공 시 str, 실패 또는 파일의 끝 도달 시 NULL
*/
int fputs(const char *str, FILE *stream);
/*
역할: 문자열을 파일이나 표준 출력에 씁니다.
str: 출력할 문자열
stream: 파일 포인터 또는 stdout
반환값: 성공 시 음수가 아닌 값, 실패 시 EOF
*/
int fscanf(FILE *stream, const char *format, ...);
/*
역할: 파일에서 형식화된 데이터를 읽어 변수에 저장합니다.
stream: 읽을 파일의 포인터
format: 읽을 데이터의 형식을 지정하는 문자열
...: format에 따라 데이터를 저장할 변수들의 주소
반환값: 성공적으로 읽은 항목의 수, 실패 시 EOF
*/
int fprintf(FILE *stream, const char *format, ...);
/*
역할: 형식화된 데이터를 파일에 씁니다.
stream: 쓸 파일의 포인터
format: 쓸 데이터의 형식을 지정하는 문자열
...: format에 따라 출력할 데이터들
반환값: 쓴 문자의 수, 실패 시 음수
*/
